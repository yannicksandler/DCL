<?php

/**
 * BancoCuentaCorriente
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
class BancoCuentaCorriente extends BaseBancoCuentaCorriente
{
	public function preInsert( $event)
	{
		if($this->Debe>0)
			$this->Banco->SaldoCuenta += $this->Debe;
		
		if($this->Haber>0)
			$this->Banco->SaldoCuenta -= $this->Haber;
		
		$this->Saldo	=	$this->Banco->SaldoCuenta;
		
		$this->Banco->save();
	}
	
	public function postInsert( $event)
	{
		// crear retencion del banco para liquidar en una OP de IIBB, IVA, etc
		$this->CrearDetalleCobranzaParaLiquidarImpuesto();
	}
	
	/*
	 * CASO 3-deposito en banco desde caja  (Deposito de efectivo desde Caja)
	 * -incrementa saldo banco
	 * -decrementa saldo caja
	 */
	public function DepositoEfectivoDesdeCaja()
	{
		$banco		= Doctrine::getTable('Banco')->FindOneById($this->BancoId);
		if(!is_object($banco))
			throw new Exception('El codigo de banco ingresado no existe');
		
		$g = new Classes_GestionEconomicaManager();
		
		if($this->Debe > 0)
			$data['Haber'] = $this->Debe;
		 
		
		$data['Detalle']	=	'Deposito de efectivo desde caja a banco';
		
		$Configuracion = Doctrine::GetTable ( 'Configuracion' )->FindOneByNombre('SaldoEfectivo');
		
		$Configuracion->Valor	=	($Configuracion->Valor - $this->Debe);
		$Configuracion->save();
		
		$data['Saldo']	=	$Configuracion->Valor;
		
		return $g->AddHistorialEfectivo($data);
	}
	
	/*
	 * CASO 2-extraccion del banco a caja  (Extraccion efectivo para Caja)
	* -incrementa saldo caja
	* -decrementa saldo banco
	*/
	public function ExtraccionEfectivoParaCaja()
	{
		$banco		= Doctrine::getTable('Banco')->FindOneById($this->BancoId);
		if(!is_object($banco))
			throw new Exception('El codigo de banco ingresado no existe');
	
		$g = new Classes_GestionEconomicaManager();
	
		if($this->Haber > 0)
			$data['Debe'] = $this->Haber;
	
		$data['Detalle']	=	'Extraccion de efectivo para caja';
	
		$Configuracion = Doctrine::GetTable ( 'Configuracion' )->FindOneByNombre('SaldoEfectivo');
	
		$Configuracion->Valor	=	$Configuracion->Valor + $this->Haber;
		$Configuracion->save();
	
		$data['Saldo']	=	$Configuracion->Valor;
	
		return $g->AddHistorialEfectivo($data);
	}
	
	/*
	 * -caso1: generar cheque para pasar de banco a caja. concepto bancario "extraccion para caja con cheque". 
	 * 		-sube saldo caja. 
	 * 		-sube correlatividad cheque (generar un cheque con el prox numero)
			-avisar al usuario el nro de cheque generado
			-restar saldo en  cta te
			-el cheque se crea en estado Debitado
	*/
	public function ExtraccionParaCajaConCheque()
	{
					$banco		= Doctrine::getTable('Banco')->FindOneById($this->BancoId);
    				if(!is_object($banco))
    					throw new Exception('El codigo de banco ingresado no existe');
    			
	    			$c	=	new Cheque();
	    			$c->FechaCreacion	=	date('d/m/Y');
	    			
	    			if($this->Debe > 0)
	    				$c->Importe = $this->Debe;
	    				
	    			if($this->Haber > 0)
	    				$c->Importe = $this->Haber;
	    			
	    			$c->BancoId	= $banco->Id;
	    			$c->BancoCodigo	= $banco->Codigo;
	    			$c->Sucursal	=	'';
	    			$c->Numero	= $banco->GetProximoNumeroDeCheque();
	    			$c->Cuenta	=$banco->NumeroDeCuenta;
	    			$c->FechaEmision	= date('d/m/Y');
	    			$c->FechaCobro	=date('d/m/Y');
	    			
	    			$c->Firmante	=$banco->GetFirmanteDeCheques();
	    			$c->CUIT	=$banco->CUIT;
	    			$c->Estado = 'Debitado';
	    			// determinar tipo de cheque (B o N)
	    			$c->Tipo	=	'B';
	    			// determinar si es cheque tercero o propio (siempre que cobro es de tercero)
	    			$c->EsPropio	=	true;
	    			$c->ProveedorId	=	31; // DCL
	    			
	    			$c->save();
	    			
	    			// actualizar ultimo numero de cheque asignado
	    			$banco->ActualizarUltimoNumeroDeCheque();
	    			
	    			$g = new Classes_GestionEconomicaManager();
	    			
	    			$data['Importe']	=	$c->Importe;
	    			$data['Detalle']	=	'Extraccion bancaria para caja con cheque #'.$c->Numero;
	    			
	    			$g->ActualizarSaldoEfectivo($data);
	    			
	    			return $c;
	}
	
	public function setUp()
	{
		parent::setUp();
	
		$this->hasAccessor('Fecha', 'FechaAccessor', 'FechaMutator');
	}
	
	public function FechaAccessor()
	{
		$timestamp	=	$this->_get('Fecha');
			
		if ($timestamp)
		{
			// convertir timestamp a dd/mm/aaaa
			$dateHelper =   new Classes_DateHelper();
	
			$date 	=	$dateHelper->toViewFormat($timestamp);
	
			return substr($date, 0, 10);
		}
		else
			return '';
	}
	
	private function CrearDetalleCobranzaParaLiquidarImpuesto()
	{
		$cd	=	new CobranzaDetalle();
			
		if($this->Debe > 0)
			$cd->Importe = $this->Debe;
			
		if($this->Haber > 0)
			$cd->Importe = $this->Haber;
			
		$cd->Detalle = $this->Fecha . ' - '. $this->Detalle . ' ('.$this->Banco->Nombre.')';
		// como todo detalle de tener una cobranza asociada, 
		// se asocia 1 default para conceptos bancarios
		$cd->CobranzaId = 1; 
		$cd->RetencionUtilizada = 'NO';
		$cd->BancoCuentaCorrienteId	=	$this->Id;
		
		switch ($this->Detalle) {
			case 'R/RECAUDACION IBSIRCREB COV.':
				{
					$cd->PagoTipoId = 7;  // IIBB CABA
						
					$cd->save();
					break;
				}
			case 'IMPUESTO AL VALOR AGREGADO':
				{
					$cd->PagoTipoId = 9;  // IVA
						
					$cd->save();
					break;
				}
			case 'IMP S/CRED EN CTA CTE':
				{
					$cd->PagoTipoId = 6;  // ganacias
						
					$cd->save();
					break;
				}
			default:
				break;
		}
	}
	
	public function FueUtilizadoEnCobranza()
	{
		// relacionar cobranza detalle con banco cta cte
		$CobranzaDetalle = Doctrine::GetTable ( 'CobranzaDetalle' )->FindOneByBancoCuentaCorrienteId($this->Id);
		if(isset($CobranzaDetalle) && is_object($CobranzaDetalle))
		{
			return true;
		}
		
		return false;
	}
	
	public function GetItems()
	{
	}
	
	
}
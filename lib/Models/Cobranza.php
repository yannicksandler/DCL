<?php

/**
 * Cobranza
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
class Cobranza extends BaseCobranza
{
	public function setUp()
    {
        parent::setUp();
        
        
        $this->hasAccessorMutator('FechaAnulacion', 'FechaAnulacionAccessor', 'FechaAnulacionMutator');
        
        $this->hasAccessorMutator('Fecha', 'FechaAccessor', 'FechaMutator');
    }
    
    public function FechaMutator( $value )
    {
        $dateHelper =   new Classes_DateHelper();
    	$date 	=	$dateHelper->fromViewFormat($value);
    	
    	
        $this->_set('Fecha', $date);
    }
    
    public function FechaAccessor()
    {
    	$timestamp	=	$this->_get('Fecha');
    	
    	if ($timestamp)
    	{
    		// convertir timestamp a dd/mm/aaaa
		    $dateHelper =   new Classes_DateHelper();
    	
        	$date 	=	$dateHelper->toViewFormat($timestamp);
        	
        	return substr($date, 0, 10);
    	}
    	else
    		return '';
    }
    
    
    public function FechaAnulacionMutator( $value )
    {
        $dateHelper =   new Classes_DateHelper();
    	$date 	=	$dateHelper->fromViewFormat($value);
    	
    	
        $this->_set('FechaAnulacion', $date);
    }
    
    public function FechaAnulacionAccessor()
    {
    	$timestamp	=	$this->_get('FechaAnulacion');
    	
    	if ($timestamp)
    	{
    		// convertir timestamp a dd/mm/aaaa
		    $dateHelper =   new Classes_DateHelper();
    	
        	$date 	=	$dateHelper->toViewFormat($timestamp);
        	
        	return $date;
    	}
    	else
    		return '';
    }
	/*
	 * @deprecated 2/6/2013
	 *
	public function GetPagoTotal()
	{
		//$detalles	=	$this->CobranzaDetalles;
		$q  =   Doctrine_Query::create()
                    ->from('CobranzaDetalle cd')
                    ->andWhere('cd.cobranzaid = ?', $this->Id);
		$detalles = $q->execute();
		$total	=	0;
		foreach($detalles as $d)
		{
			if($d->CobranzaId == $this->Id)
				$total	= $total +	$d->Importe;
		}
		
		return $total;
	}
	*/
    
    /*
     * @deprecated 6/2/2013 
     *
	public function AgregarLiquidacion($data)
	{
			$Importe	=	$data['Importe'];
			$NumeroFactura	=	$data['NumeroFactura'];
			
    	
			$factura		= Doctrine::getTable('Factura')->FindOneById( $NumeroFactura );
			if(! $factura)
				throw new Exception('La factura ingresada no existe');
			
			if(is_numeric($Importe) and is_numeric($NumeroFactura))
			{
			
				$liquidacion	=	new CobranzaLiquidacion();
				
				$liquidacion->CobranzaId	=	$this->Id;
				$liquidacion->Importe	=	$Importe;
				$liquidacion->FacturaId	=	$NumeroFactura;
				
				
				$liquidacion->save();
				
				$factura->VerificarCobro();
				return true;
			}
			
			return false;
	}
	*/
	/*
	 * @deprecated 2/6/2013
	public function AgregarPago($data)
	{
			$PagoTipoId	=	$data['PagoTipoId'];
			$Importe	=	$data['Importe'];
			
			$FechaCheque	=	$data['FechaCheque']; // convertir fecha
			$dateHelper =   new Classes_DateHelper();
			
			if(isset($data['Detalle']))
				$Detalle	=	$data['Detalle'];
			
			if(is_numeric($Importe) and is_numeric($PagoTipoId))
			{
			
				$pago	=	new CobranzaDetalle();
				$pago->CobranzaId	=	$this->Id;
				$pago->PagoTipoId	=	$PagoTipoId;
				$pago->Importe	=	$Importe;
				$pago->Detalle	=	$Detalle;
				$pago->FechaCheque = $dateHelper->fromViewFormat($FechaCheque);
				
				$pago->save();
			
				return true;
			}
		
		return false;
	}
	
	*/
	
	
	/* utilizado en documento imprimible de Recibo de Pago */
	public function GetResumen()
	{
		$resumen	=	array();
		
		$resumen['CobranzaId']	=	$this->Id;
		$resumen['Numero']	=	$this->Numero;
		$resumen['Fecha']	=	$this->Fecha;
		$resumen['Cliente']	=	$this->Cliente;
		//$resumen['Importe']	=	$this->Importe;
		
		// listados
		$resumen['Liquidaciones']	=	$this->GetFacturasLiquidadas();
		$resumen['Pagos']	=	$this->GetDetalleDePago();
		
		$resumen['TotalLiquidaciones']	=	$this->GetImporteLiquidado();
		$resumen['TotalPago']	=	$this->GetImportePagado();
		
		$resumen['Facturas']	=	$this->GetFacturasLiquidadas();
		
		$resumen['Comentario']	=	$this->Comentario;
		
		return $resumen;
	}
	
	public function GetFacturasLiquidadas()
	{
		$q  = Doctrine_Query::create()
                ->from('CobranzaLiquidacion cl')
                ->andWhere('cl.CobranzaId = ?', $this->Id);
                
        $liquidacion = $q->execute();
        
        return $liquidacion;
	}
	
	public function GetDetalleDePago()
	{
		$q  = Doctrine_Query::create()
                ->from('cobranzadetalle cd')
                ->innerJoin('cd.PagoTipo p')
                ->andWhere('cd.cobranzaid = ?', $this->Id);
                
        $detalles = $q->execute();
        
        return $detalles;
	}
	
	public function AgregarLiquidacionFacturas()
	{
	
		// obtener facturas de compra agregadas en session
		$s = new Classes_Session();
		$s->Session();
	
	
		foreach ($_SESSION["FacturasArray"] as $o)
		{
			$l = new CobranzaLiquidacion();
			
			$factura		= Doctrine::getTable('Factura')->FindOneById( $o['FacturaNumero'] );
			if(! $factura)
				throw new Exception('La factura ingresada no existe');
			/*
			 * bug porque se comparan float VS string resuelto>20/07/2014
			if((number_format($factura->GetTotalCobrado() + $o['ImporteLiquidado'],2,'.','')) 
					> 
					number_format($factura->Importe,2,'.',''))
				echo 1;
				var_dump(number_format($factura->GetTotalCobrado()+$o['ImporteLiquidado'],2,'.',''));
				
				var_dump(number_format($factura->Importe,2,'.',''));
				
			if(($factura->GetTotalCobrado() + $o['ImporteLiquidado']) > $factura->Importe)*/
			if((number_format($factura->GetTotalCobrado() + $o['ImporteLiquidado'],2,'.',''))
					>
					number_format($factura->Importe,2,'.',''))
				throw new Exception('El importe total liquidado supera el importe de la factura');
			 
			$l->CobranzaId = $this->Id;
			$l->FacturaId = $o['FacturaNumero'];
			//$l->ClienteId = $this->ClienteId;
			//$l->TipoIvaId	=	$o['TipoIvaId'];
			$l->Importe = $o['ImporteLiquidado'];
			$l->FechaGrabacion = date('Y-m-d H:i:s');
	
			$l->save();
			
			$factura->VerificarCobro();
			//print_r($o);
		}
	
	
		// liberar facturas de session
		$s->LimpiarFacturasLiquidacionCobranza();
	}
	
	public function AgregarDetalleDePago()
	{
		// obtener pagos agregadas en session y agregarlos
		$s = new Classes_Session();
		$s->Session();
	
		if(count($_SESSION["PagosArray"]) == 0)
			throw new Exception('Debe ingresar detalle de pago.');
		 
		foreach ($_SESSION["PagosArray"] as $o)
		{
			$l = new CobranzaDetalle();
			 
			$l->CobranzaId = $this->Id;
			$l->Detalle = $o['Detalle'];
			$l->Importe	=	$o['Importe'];
			$l->PagoTipoId = $o['PagoTipoId'];
			$dateHelper =   new Classes_DateHelper();
			// fecha de cobro para ser visto cuando la cobranza fue creada
			$l->FechaCheque = $dateHelper->fromViewFormat($o['FechaCheque']);
	
			// si es un tipo de pago: Cheque tercero (id = 4), 
			// - crear cheque (indicar si es Blanco o negro) segun el tipo de cobranza
			if($o['PagoTipoId'] == 4)
			{
				$c	=	new Cheque();
				$c->FechaCreacion	=	date('d/m/Y');
				$c->Importe	= $o['Importe'];	
				$c->BancoCodigo	= $o['Banco'];
				$c->Sucursal	=	$o['Sucursal'];
				$c->Localidad	=$o['Localidad'];
				$c->Numero	= $o['Numero'];
				$c->Cuenta	=$o['Cuenta'];
				$c->FechaEmision	= $o['FechaCheque'];
				$c->FechaCobro	= $o['FechaCobro'];
				
				$c->Firmante	=$o['Firmante'];
				$c->CUIT	=$o['Cuit'];
				$c->Estado = 'En cartera';
				// determinar tipo de cheque (B o N)
				$c->Tipo	=	$this->Tipo;
				// determinar si es cheque tercero o propio (siempre que cobro es de tercero)
				$c->EsPropio	=	false;
				$c->ClienteId	=	$this->ClienteId;
				
				$c->save();
				
				$l->ChequeId	=	$c->Id;
			}
			// si es efectivo, incrementar saldo en efectivo
			if($o['PagoTipoId'] == 2)
			{
				$Configuracion = Doctrine::GetTable ( 'Configuracion' )->FindOneByNombre('SaldoEfectivo');
				$Configuracion->Valor +=	$o['Importe'];
				$Configuracion->save();

				$data['Detalle'] = 'CO #' . $this->Id . ' - ' .$l->Detalle;
				$data['Importe']	=	$l->Importe;
				$data['Saldo']	=	$Configuracion->Valor;
				$data['Debe']	=	$data['Importe'];
				
				$g = new Classes_GestionEconomicaManager();
				$g->AddHistorialEfectivo($data);
			}
			
			// si es un tipo de pago: transferencia (id = 13),
			// - actualizar saldo de la cuenta de banco asociada
			if($o['PagoTipoId'] == 13)
			{
				if(isset($o['Banco']))
				{
					$banco		= Doctrine::getTable('Banco')->FindOneById($o['Banco']);
					if(!is_object($banco))
						throw new Exception('El banco ingresado no existe');
			
					// modificar saldo del banco con el importe de la transferencia
					//$banco->SaldoCuenta	+=	$o['Importe'];
					//$banco->save();
					
					$ctacte		=	new Classes_CuentaCorrienteManager();
					$data['Debe']	=	$o['Importe'];
					$data['Saldo']	=	$banco->SaldoCuenta;
					$data['BancoId']	=	$banco->Id;
					$data['Detalle']	=	'Tranferencia bancaria de cobranza '.$this->Numero;
					$ctacte->AddConceptoBancoCuentaCorriente($data);
				}
			}
			
			
			$l->save();
			//print_r($o);
		}
	
	
		// liberar pagos de session
		$s->LimpiarPagosLiquidacionCobranza();
	}
	
	public function GetImporteLiquidado()
	{
		$total = 0;
		$liquidacion	=	$this->GetFacturasLiquidadas();
		if(count($liquidacion) > 0)
		{
			foreach ($liquidacion as $o)
			{
				$total = $total + $o->Importe;
			}
		}
		else
		{
			// se liquida en session
			$s = new Classes_Session();
			return $s->GetImporteLiquidadoCobranza();
		}
		return $total;
	}
	
	public function GetImportePagado()
	{
		$total = 0;
		$liquidacion	=	$this->GetDetalleDePago();
		if(count($liquidacion) > 0)
		{
			foreach ($liquidacion as $o)
			{
				$total = $total + $o->Importe;
			}
		}
		else
		{
			// se liquida en session
			$s = new Classes_Session();
			return $s->GetTotalPagosLiquidadosCobranza();
		}
		return $total;
	}
	
	public function GetImporteRestante()
	{
		return $this->GetImporteLiquidado() - $this->GetImportePagado();
	}
	// utilizado en cuenta corriente cliente view
	public function GetPagoTotal()
	{
		if($this->Importe)
			return $this->Importe;
		// BUG: mantener compatibilidad con modelo de Cobranza anterior
		// no tenia atributo Importe (fallaba cuenta corriente cliente)
		$q  =   Doctrine_Query::create()
			->from('CobranzaDetalle cd')
			->andWhere('cd.cobranzaid = ?', $this->Id);
		$detalles = $q->execute();
		$total	=	0;
		foreach($detalles as $d)
		{
			if($d->CobranzaId == $this->Id)
				$total	= $total +	$d->Importe;
		}
		
		return $total;
	}
	
	/*
	 * existe distinta numeracion segun el tipo de cobranza
	 * Tipo Negro o Interna
	 * Tipo Blanco o Externa
	 */
	public function GetProximoNumero()
	{
			if($this->GetTipoSegunLiquidacion() == 'B')
			{
				// obtener ultimo numero en blanco
				return $this->GetUltimoNumeroExterno() + 1;
			}
			
			if($this->GetTipoSegunLiquidacion() == 'N')
			{
				// obtener ultimo numero en negro
				return $this->GetUltimoNumeroInterno() + 1;
			}
	}
	
	public function GetTipoSegunLiquidacion()
	{
		$s = new Classes_Session();
		$facturas	=	$s->GetFacturasLiquidadasCobranza();
		
		foreach($facturas as $f)
		{
			
			$factura		= Doctrine::getTable('Factura')->FindOneById( $f['FacturaNumero'] );
			if(! $factura)
				throw new Exception('La factura ingresada no existe');
				
			// solo se muestra en pantalla las Internas o Externas para cobrar
			// por lo tanto con determinar el tipo de una, alcanza
			if(($factura->GetLetraFactura() == 'A') or ($factura->GetLetraFactura() == 'B') or 
					($factura->GetLetraFactura() == 'C'))
				return 'B';
			
			if($factura->GetLetraFactura() == 'N')
				return 'N';
		}
	}
	
	public function GetUltimoNumeroInterno()
	{
		$q	=	Doctrine_Query::create()
		->select('c.Id')
		->from('Cobranza c')
		->andWhere('c.Tipo = ?', 'N')
		->orderBy('c.Numero DESC')
		->limit(1);
	
	
		$cobranza	=	$q->fetchOne();
		if(is_object($cobranza))
			return $cobranza->Numero;
	
			$factory	= IDS_Factory_Manager::GetFactory();
			$config		= $factory->GetConfig();
	
			$Default	=	$config->Get('bussiness.numerocobranzaN');
	
			if(isset($Default) and is_numeric($Default))
			return $Default;
			else
				return 9999999;
	}
	
	public function GetUltimoNumeroExterno()
	{
		$q	=	Doctrine_Query::create()
		->select('c.Id')
		->from('Cobranza c')
		->andWhere('c.Tipo = ?', 'B')
		->orderBy('c.Numero DESC')
		->limit(1);
	
	
		$cobranza	=	$q->fetchOne();
		if(is_object($cobranza))
			return $cobranza->Numero;
		else
		{
			// ultimo id autonumerico
			$q	=	Doctrine_Query::create()
			->select('c.Id')
			->from('Cobranza c')
			->orderBy('c.Id DESC')
			->limit(1);
				
				
			$cobranza	=	$q->fetchOne();
			if(is_object($cobranza))
				return $cobranza->Id;
		}
	
		$factory	= IDS_Factory_Manager::GetFactory();
		$config		= $factory->GetConfig();
	
		$Default	=	$config->Get('bussiness.numerocobranzaB');
	
		if(isset($Default) and is_numeric($Default))
			return $Default;
			
		return 0;
	}
	
	public function Anular()
	{
		$this->FechaAnulacion	=	date('d/m/Y H:i:s');
		$this->save();
		
		// eliminar o anular liquidaciones y pagos
		$g	=	new Classes_GestionEconomicaManager();
		$g->AnularCobranza($this);
		
	}
	
}

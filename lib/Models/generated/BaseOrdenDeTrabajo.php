<?php

/**
 * BaseOrdenDeTrabajo
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $Id
 * @property string $Producto
 * @property clob $DescripcionDeTrabajo
 * @property timestamp $FechaInicio
 * @property timestamp $FechaEntrega
 * @property timestamp $FechaFin
 * @property string $CondicionDeCobro
 * @property string $LugarDeEntrega
 * @property string $TipoFactura
 * @property string $Observaciones
 * @property integer $Cantidad
 * @property decimal $TotalSinIva
 * @property decimal $TotalConIva
 * @property integer $ClienteId
 * @property integer $EstadoId
 * @property integer $PrioridadId
 * @property string $PrioridadComentario
 * @property integer $Status
 * @property date $FechaFactura
 * @property string $FacturaNumero
 * @property integer $PresupuestoId
 * @property date $FechaFacturacion
 * @property decimal $CostosDeInicioProduccion
 * @property integer $TiempoEstimado
 * @property string $EsFicticia
 * @property integer $CreadorUsuarioId
 * @property Cliente $Cliente
 * @property OrdenEstado $Estado
 * @property Prioridad $Prioridad
 * @property Presupuesto $Presupuesto
 * @property Usuario $CreadorUsuario
 * @property Doctrine_Collection $Insumos
 * @property Doctrine_Collection $OrdenEstadoHistorial
 * @property Doctrine_Collection $Facturas
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
abstract class BaseOrdenDeTrabajo extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('orden_de_trabajo');
        $this->hasColumn('Id', 'integer', 4, array(
             'type' => 'integer',
             'primary' => true,
             'unsigned' => true,
             'autoincrement' => true,
             'length' => '4',
             ));
        $this->hasColumn('Producto', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '255',
             ));
        $this->hasColumn('DescripcionDeTrabajo', 'clob', 65535, array(
             'type' => 'clob',
             'notnull' => true,
             'length' => '65535',
             ));
        $this->hasColumn('FechaInicio', 'timestamp', null, array(
             'type' => 'timestamp',
             'notnull' => true,
             ));
        $this->hasColumn('FechaEntrega', 'timestamp', null, array(
             'type' => 'timestamp',
             'notnull' => true,
             ));
        $this->hasColumn('FechaFin', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('CondicionDeCobro', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('LugarDeEntrega', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('TipoFactura', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('Observaciones', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('Cantidad', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '4',
             ));
        $this->hasColumn('TotalSinIva', 'decimal', 10, array(
             'type' => 'decimal',
             'scale' => 2,
             'length' => '10',
             ));
        $this->hasColumn('TotalConIva', 'decimal', 10, array(
             'type' => 'decimal',
             'scale' => 2,
             'length' => '10',
             ));
        $this->hasColumn('ClienteId', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'notnull' => true,
             'length' => '4',
             ));
        $this->hasColumn('EstadoId', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'notnull' => true,
             'length' => '4',
             ));
        $this->hasColumn('PrioridadId', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '4',
             ));
        $this->hasColumn('PrioridadComentario', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('Status', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'notnull' => true,
             'default' => '1',
             'length' => '4',
             ));
        $this->hasColumn('FechaFactura', 'date', null, array(
             'type' => 'date',
             ));
        $this->hasColumn('FacturaNumero', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('PresupuestoId', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('FechaFacturacion', 'date', null, array(
             'type' => 'date',
             ));
        $this->hasColumn('CostosDeInicioProduccion', 'decimal', 10, array(
             'type' => 'decimal',
             'scale' => 2,
             'length' => '10',
             ));
        $this->hasColumn('TiempoEstimado', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '4',
             ));
        $this->hasColumn('EsFicticia', 'string', 255, array(
             'type' => 'string',
             'default' => 'NO',
             'length' => '255',
             ));
        $this->hasColumn('CreadorUsuarioId', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '4',
             ));


        $this->index('clienteid_idx', array(
             'fields' => 
             array(
              0 => 'ClienteId',
             ),
             ));
        $this->index('estadoid_idx', array(
             'fields' => 
             array(
              0 => 'EstadoId',
             ),
             ));
        $this->index('fk_creador_usuario1', array(
             'fields' => 
             array(
              0 => 'CreadorUsuarioId',
             ),
             ));
        $this->option('collate', 'utf8_spanish_ci');
        $this->option('charset', 'utf8');
        $this->option('type', 'InnoDB');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Cliente', array(
             'local' => 'ClienteId',
             'foreign' => 'Id',
             'onUpdate' => 'cascade'));

        $this->hasOne('OrdenEstado as Estado', array(
             'local' => 'EstadoId',
             'foreign' => 'Id',
             'onUpdate' => 'cascade'));

        $this->hasOne('Prioridad', array(
             'local' => 'PrioridadId',
             'foreign' => 'Id',
             'onUpdate' => 'cascade'));

        $this->hasOne('Presupuesto', array(
             'local' => 'PresupuestoId',
             'foreign' => 'Id'));

        $this->hasOne('Usuario as CreadorUsuario', array(
             'local' => 'CreadorUsuarioId',
             'foreign' => 'Id'));

        $this->hasMany('Insumo as Insumos', array(
             'local' => 'Id',
             'foreign' => 'OrdenId'));

        $this->hasMany('OrdenEstadoHistorial', array(
             'local' => 'Id',
             'foreign' => 'OrdenDeTrabajoId'));

        $this->hasMany('Factura as Facturas', array(
             'local' => 'Id',
             'foreign' => 'OrdenDeTrabajoId'));
    }
}
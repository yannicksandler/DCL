<?php

/**
 * Cliente
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
class Cliente extends BaseCliente
{
	/**
	 * 
	 * @param unknown_type $Fecha
	 * @param unknown_type $OrdenesId
	 * @param unknown_type $data: comentario, importe del comentario
	 * @return Classes_FacturaFactory
	 */
	public function Facturar($Fecha, $OrdenesId, $data)
	{
		/**
		 * orden debe estar facturada, sino excepcion
		 */
		/*
		$conn = Doctrine_Manager::connection();
		
		try
		{
			*/
			if(isset($Fecha) and is_array($OrdenesId))
			{
			
				// como transaccion de doctrine
				$ff		=	new Classes_FacturaFactory($this, $Fecha, $OrdenesId, $data);
				
				$factura	=	 $ff->CrearFactura();
				if(!is_object($factura))
						throw new Exception('No fue creada la factura');
						
				return $factura;
				
			}
			/*	
		}
		catch(Doctrine_Exception $e)
		{
			$conn->rollback();
			echo $e->errorMessage('No fue posible crear la factura');
		}	*/
	}
	
	public function GetOrdenesDeTrabajoSinFacturar()
	{
		$filters=array();
		$filters['ClienteId']=$this->Id;
		
		$q = Doctrine::getTable('OrdenDeTrabajo')->GetOrdenesDeTrabajoSinFacturar($filters);
		
		return $q->execute();
	}
	
	public function FormatCuit()
	{
		$cuit	=	$this->Cuit;
		
		$primero	=	substr($cuit, 0, 2);
		$segundo	=	substr($cuit, 2, 8);
		$tercero	=	substr($cuit, 10, 11);
		
		return $primero . '-' . $segundo . '-' . $tercero;
	}
	
	public function GetLetraFactura()
	{
		if(isset($this->TipoIvaId) and is_numeric($this->TipoIvaId) and ($this->TipoIvaId > 0))
			return $this->TipoIva->Letra_comp;
		//echo 'El cliente no tiene tipo de factura asociada. Se crea factura N por defecto. Agregar a configuracion';
		/* traer de config.ini bussiness.defaultLetraFactura=N*/
		$factory	= IDS_Factory_Manager::GetFactory();
		$config		= $factory->GetConfig();
						
		$Default	=	$config->Get('bussiness.letra_factura_default');
		if(isset($Default))
			return $Default;
			
		return 'N';
	}
	
	public function GetPorcentajeIva()
	{
		if(isset($this->TipoIvaId))
		{
		    switch ($this->GetLetraFactura())
        	{
        		case 'A': {return $this->TipoIva->Discriminado; break;}
        		case 'B': {return $this->TipoIva->Incluido; break;}
        		case 'N': {return $this->TipoIva->Incluido; break;}
        		default: {return $this->TipoIva->Incluido; break;}
        	}
		}
		else
			return 0;
	}
	
	public function GetResumenPrefacturacion()
	{
		$r = array();
		
		$r['Cliente'] = $this->toArray();
		$r['CantidadOrdenesSinFactura'] = count($this->GetOrdenesDeTrabajoSinFacturar());
		$r['ClienteCuit'] = $this->FormatCuit();
		$r['ClienteTipoIva']	=	$this->GetNombreTipoIva();
		
		$ordenes=array();
		$ordenes[]=1;
		$ff		=	new Classes_FacturaFactory($this, date('2011-01-01'), $ordenes);
		$r['FacturaNumero'] = $ff->GetUltimoNumeroFactura($this->GetLetraFactura()) + 1;
		$r['LetraFactura'] = $this->GetLetraFactura();
		
		return $r;
	}
	
	public function GetNombreTipoIva()
	{
		if(isset($this->TipoIvaId))
		{
			return $this->TipoIva->Nombre;
		}
		
		return 'Sin asignar'; 
	}

	public function GetFacturasPendientesDeCobro($TipoCobranza=null)
	{
		// limpiar agregadas en sesion
		$s	=	new Classes_Session();
		$s->LimpiarFacturasLiquidacionCobranza();
		$s->LimpiarPagosLiquidacionCobranza();
		
		$filters = array();
		$filters['ClienteId']	=	$this->Id;
		
		$q = Doctrine::getTable('Factura')->GetPendientesDeCobro( $filters );
		$facturas = $q->execute();
		
		$facturasPendientes = array();
		foreach($facturas as $f)
		{
			if($f->Importe > $f->GetTotalCobrado())
			{
				
				if(($TipoCobranza == 'N') and ('N' == $f->GetLetraFactura()))
					$facturasPendientes[] = $f;
				
				// si es en blanco, puede ser factura A,B o C
				if($TipoCobranza == 'B')
				{	
					if(($f->GetLetraFactura()=='A') or 
						($f->GetLetraFactura()=='B') or ($f->GetLetraFactura()=='C'))
					{
						$facturasPendientes[] = $f;
					}
				}
			}
		}
		
		return $facturasPendientes;
	}
	
	public function GetTotalFacturasPendientesDeCobro()
	{
		$facturas = $this->GetFacturasPendientesDeCobro();
		
		$total = 0;
		
		foreach($facturas as $f)
		{
			$total += $f->Importe;
		}
		
		return $total;
	}
	
	
	public function AgregarFacturaACobranza($data)
	{
		if(	($data['ImporteLiquidado'] < 0) || ($data['ImporteLiquidado'] == 'Importe') ||
				 ($data['ImporteLiquidado'] == ''))
			throw  new Exception('Debe ingresar el importe a liquidar');
	
		$s	=	new Classes_Session();
		$s->AgregarFacturaLiquidacionCobranza($data);
	}
	
	public function AgregarPagoACobranza($data)
	{
		if($data['PagoTipoId'])
		{
		switch ($data['PagoTipoId']) {
				case 12:
				{
					// 	nota credito
					if(!$data['NotaCreditoId'])
						throw new Exception('Debe ingresar la nota de credito');
						
					$banco		= Doctrine::getTable('NotaCredito')->FindOneById($data['NotaCreditoId']);
						
					if(!is_object($banco))
					{
						throw new Exception('La nota de credito ingresada no existe');
					}
						
					break;
				}
				case 13:
					{
							// 	si es transferencia, debe estar asociada a un banco y una cuenta
							if(!$data['Banco'])
								throw new Exception('Debe ingresar el codigo del banco');
							
							$banco		= Doctrine::getTable('Banco')->FindOneById($data['Banco']);
							
							if(!is_object($banco))
							{
								throw new Exception('El banco ingresado no existe');
							}
							
						break;
					}
				case 4:
						{
							// Cheque tercero
							if(	($data['ImporteCheque'] < 0) || ($data['ImporteCheque'] == 'Importe') ||
							($data['ImporteCheque'] == ''))
								throw  new Exception('Debe ingresar el importe a liquidar');
							
							if(	($data['Numero'] <= 0) || ($data['Numero'] == 'Importe') ||
									($data['Numero'] == ''))
								throw  new Exception('Debe ingresar el numero de cheque');
							
							$banco		= Doctrine::getTable('Banco')->FindOneByCodigo($data['Banco']);
							
							if(!is_object($banco))
							{
								throw new Exception('El codigo de banco ingresado no existe. Debe existir el banco y codigo');
							}
							
							break;
						}
			default:
				{
					if(	($data['Importe'] < 0) || ($data['Importe'] == 'Importe') ||
							($data['Importe'] == ''))
						throw  new Exception('Debe ingresar el importe a liquidar');
					
					break;
				}
		}
		
		}
		$s	=	new Classes_Session();
		$s->AgregarPagoACobranza($data);
	}
	
	public function CrearCobranza($data)
	{
		$s	=	new Classes_Session();
		// validaciones
		if(!isset($data))
			throw new Exception('Faltan datos para crear la cobranza');
	
		// debe tener detalle de pago
		if($s->GetPagosLiquidadosCobranza() <= 0)
			throw new Exception('Debe agregar detalle de pago');
		// debe tener importe liquidado (facturas)
		if($s->GetImporteLiquidadoCobranza() <= 0)
			throw new Exception('Debe liquidar facturas');
		
		//var_dump($s->GetImporteLiquidadoCobranza() . "--".$s->GetTotalPagosLiquidadosCobranza());
		// el importe liquidado debe ser igual al detalle de pago, sino no crear
		
		if(isset($data['Adelanto']) && ($data['Adelanto']=='NO'))
		if(
				number_format($s->GetImporteLiquidadoCobranza(),2, '.','') !=
				number_format($s->GetTotalPagosLiquidadosCobranza(),2, '.','')
		)
			throw new Exception('Debe coincidir el importe liquidado con el detalle de pago');
	
		$c	=	new Cobranza();
	
		if(!is_object($c))
			throw new Exception('No fue creada la cobranza');
	
		$now    =   new DateTime();
		$c->Numero	=	$c->GetProximoNumero();
		$c->Tipo	=	$c->GetTipoSegunLiquidacion();
		$c->Fecha	=	$now->format('d/m/Y H:i:s');
		$c->Importe	=	$s->GetImporteLiquidadoCobranza();
		$c->ClienteId	=	$this->Id;
		$c->Comentario	=	$data['Comentario'];
	
		$conn = Doctrine_Manager::connection();
		/*
			try
		{
		*/
		
		
		$conn->beginTransaction();
	
		$c->save();
	
		$c->AgregarLiquidacionFacturas();
		$c->AgregarDetalleDePago();
	
		$conn->commit();
		/*
			}
		catch(Doctrine_Exception $e)
		{
		$conn->rollback();
		throw new Exception($e->errorMessage('No fue posible crear la orden de pago'));
		}
		*/
	
		return $c;
	
	}
	
	public function GetSaldo()
	{
		$filters	=	array();
		$filters['ClienteId']	=	$this->Id;
		$cc	=	new Classes_CuentaCorrienteManager($filters);
		//$CtaCte = $cc->GetByCliente($filters);
		
		return $cc->GetSaldoCliente($filters);
	}
	
	public function FindAllArray()
	{
		$string = "";
		$clientes = Doctrine::getTable('Cliente')->FindAll();
	
		foreach($clientes as $p)
		{
			$string = $string . str_replace(",", ".",'"'.$p->Nombre.'"') . ",";
		}
	
		$string = substr ($string, 0, strlen($string) - 1);
		return $string;
	}
	
	
	
}
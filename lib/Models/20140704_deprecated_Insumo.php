<?php

/**
 * Insumo
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
class Insumo extends BaseInsumo
{
	public function postInsert( $event)
	{
		$invoker = $event->getInvoker();
	
		$this->SetEstadoBuscando();
	}
	
	private function SetEstadoBuscando()
	{
		$orden	=	$this->Orden;
		// crear metodo
		$estado		= Doctrine::getTable('OrdenEstado')->FindOneByNombre( 'Buscando' );
		if(is_object($estado))
		{
			/* solo cambia a estado "Buscando" cuando agrego primer insumo */
			if(($orden->GetCantidadInsumos() == 0)||
					($orden->GetCantidadInsumos() == 1))
			{
				$c	=	new Classes_EstadosManager($this->Orden);
				// asignar estado a Buscando
				$orden->EstadoId	=	$estado->Id;
				// comprobar si puede ocurrir pasaje del estado anterioir a buscando
				if($c->ComprobarMatrizTransicionEstados())
					$orden->save();
			}
		}
	}
	
    public function GenerarOrdenDeCompra()
    {
    	if(!$this->IsElegido())
    		throw new Exception('El insumo no esta elegido');
    	
        if($this->IsElegido() and !$this->HasOrdenDeCompra())
        {
            $ordenCompra    =   new OrdenDeCompra();
            
            $now    =   new DateTime();
            $ordenCompra->Fecha =   $now->format('d/m/Y H:i:s');
            $ordenCompra->Importe	=	$this->GetTotal();
            $ordenCompra->ProveedorId	=	$this->ProveedorId;
            
            $ordenCompra->TipoIvaId	=	$this->GetTipoIva();
            $ordenCompra->CondicionesDePago	=	$this->FormaDePago;
            
            $ordenCompra->save();
            
            /* asociar orden de compra con el insumo */
            $this->OrdenDeCompraId  =   $ordenCompra->Id;
            
            $this->save();
            
            /* cuando se genera una orden de compra, el estado de 
             * la orden de trabajo cambia a 'En producccion'
             */
            /*
             * @deprecated 21/11/2013
             *
        	$orden	=	$this->Orden;
        	
			if(is_object($orden))
			{
				if($orden->IsPrimerOrdenDeCompra())
				{
					$manager = new Classes_EstadosManager($orden);
					
					//$orden->SetEstadoProduccion();
					$manager->SetEstadoProduccion();
				}
			}
			else
				throw new Exception('No fue posible cambiar a estado produccion. La orden de trabajo no existe');
            */
            
            return true;
        }
        else
        {
            return false;
        }
    }
    
    public function IsElegido()
    {
        if($this->Elegido   ==  'SI' )
            return true;
        
        return false;
    }
    
    public function HasOrdenDeCompra()
    {
        
        if(is_numeric($this->OrdenDeCompraId))
            return true;
        
        return false;
            
    }
    
    public function GetTotal()
    {
    	
    	if($this->CondicionDePago == 'B')
    	{
    		$factorIva	=	($this->Proveedor->GetPorcentajeIva()/100)+1; //1.21 o 1.10 o 1.27
    		
    		return ($this->PrecioUnitarioSinIVA * $this->Cantidad * $factorIva);
    	}
    		
    	return ($this->PrecioUnitarioSinIVA * $this->Cantidad);
    }
    
    public function SetEntregado()
    {
    	if(!$this->HasOrdenDeCompra())
    	{
    		throw new Exception('No es posible entregar un insumo sin Orden de compra');
    	}
    	if(!$this->IsElegido())
    	{
    		throw new Exception('No es posible marcar un insumo como entregado si no esta elegido');
    	}
    	
    	$this->FechaDeEntrega = date('Y-m-d');
    	$this->save();
    	
    	$orden = $this->Orden;
    	if($orden->HasAllInsumosEntregados())
    	{
    		$orden->SetEstadoFinalizado();
    	}
    }
    
    public function GetImporteAbonado()
    {
    	$total = 0;
    	
    	$q  = Doctrine_Query::create()
                ->from('OrdenDePagoOrdenDeCompra opoc')
                ->andWhere('opoc.ordendecompraid = ?', $this->OrdenDeCompraId);
                
        $abonado = $q->execute();
        foreach($abonado as $a)
        {
        	$total = $total + $a->ImporteAbonado;
        }
        
        return $total;
    }
    
    public function TieneImportePendiente()
    {
    	if($this->GetImporteAbonado() < $this->GetTotal())
    	{
    		return true;
    	}
    	
    	return false;
    }
    
	public function IsEntregado()
    {
    	if($this->FechaDeEntrega)
    	{
    		return true;
    	}
    	
    	return false;
    }
    
    public function GetTipoIva()
    {
    	if(!$this->Proveedor->TipoIvaId)
    		throw new Exception('El proveedor no tiene tipo de iva');
    	
    	if ($this->CondicionDePago == 'N')
    		return 12; // tipo de iva en negro
    	
    	return $this->Proveedor->TipoIvaId;
    }
    
    public function TieneOrdenDeCompraAnulada()
    {
    	$oc	=	$this->OrdenDeCompra;
    	if(is_object($oc))
    	{
    		if($oc->EstaAnulada())
    			return true;
    	}
    	
    	return false;
    }
}
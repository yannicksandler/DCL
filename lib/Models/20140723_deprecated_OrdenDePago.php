<?php

/**
 * OrdenDePago
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
class OrdenDePago extends BaseOrdenDePago
{
	public function setUp()
    {
        parent::setUp();
        
        $this->hasAccessorMutator('FechaAnulacion', 'FechaAnulacionAccessor', 'FechaAnulacionMutator');
        $this->hasAccessorMutator('Fecha', 'FechaAccessor', 'FechaMutator');
    }
    
    
    
    public function FechaMutator( $value )
    {
        $dateHelper =   new Classes_DateHelper();
    	$date 	=	$dateHelper->fromViewFormat($value);
    	
    	
        $this->_set('Fecha', $date);
    }
    
    public function FechaAccessor()
    {
    	$timestamp	=	$this->_get('Fecha');
    	
    	if ($timestamp)
    	{
    		// convertir timestamp a dd/mm/aaaa
		    $dateHelper =   new Classes_DateHelper();
    	
        	$date 	=	$dateHelper->toViewFormat($timestamp);
        	
        	return substr($date, 0, 10);
    	}
    	else
    		return '';
    }
    
    
    public function FechaAnulacionMutator( $value )
    {
        $dateHelper =   new Classes_DateHelper();
    	$date 	=	$dateHelper->fromViewFormat($value);
    	
    	
        $this->_set('FechaAnulacion', $date);
    }
    
    public function FechaAnulacionAccessor()
    {
    	$timestamp	=	$this->_get('FechaAnulacion');
    	
    	if ($timestamp)
    	{
    		// convertir timestamp a dd/mm/aaaa
		    $dateHelper =   new Classes_DateHelper();
    	
        	$date 	=	$dateHelper->toViewFormat($timestamp);
        	
        	return $date;
    	}
    	else
    		return '';
    }
    
	public function GetPagoTotal()
	{
		
		$pagos	=	$this->Pagos;
		
		$total	=	0;
		if(count($pagos) > 0)
		{
			foreach ($pagos as $o)
			{
				$total = $total + $o->Importe;
			}
		}
		else
		{
			// se liquida en session
			$s = new Classes_Session();
			return $s->GetTotalPagosLiquidadosOrdenDePago();
		}
		
		return $total;
	}
	/*
	public function EstaPago()
	{
		$pagoTotal	=	$this->GetPagoTotal();
		
		$totalInsumo	=	$this->GetOneOrdenDeCompra()->GetOneInsumo()->GetTotal();
		
		if($pagoTotal	== $totalInsumo)
		{
			
			return true;
		}
			
		return false;
	}
	*/
	/*
	 * @deprecated 10/03/2013
	 *
	public function AgregarPago($data)
	{
		if(	isset($data['OrdenDePagoId']) and 
			isset($data['PagoTipoId']) and isset($data['Importe']))
		{
			$OrdenDePagoId	=	$data['OrdenDePagoId'];
			$PagoTipoId	=	$data['PagoTipoId'];
			$Importe	=	$data['Importe'];
			$FechaCheque	=	$data['FechaCheque'];
			
			if(isset($data['Detalle']))
				$Detalle	=	$data['Detalle'];
			
			if(is_numeric($Importe) and is_numeric($PagoTipoId))
			{
			
				$pago	=	new Pago();
				$pago->OrdenDePagoId	=	$OrdenDePagoId;
				$pago->PagoTipoId	=	$PagoTipoId;
				$pago->Importe	=	$Importe;
				$pago->Detalle	=	$Detalle;
				$dateHelper =   new Classes_DateHelper();
				$pago->FechaCheque = $dateHelper->fromViewFormat($FechaCheque);
				
				$pago->save();
				
				
				return true;
			}
		}
		return false;
	}
	*/
	public function AgregarLiquidacion($data)
	{
		
		/*
		if(	isset($data['OrdenDePagoId']) and 
			isset($data['Detalle']) and isset($data['Importe'])
			and isset($data['Fecha']))
		{
			$OrdenDePagoId	=	$data['OrdenDePagoId'];
			$Detalle	=	$data['Detalle'];
			$Importe	=	$data['Importe'];
			$Fecha	=	$data['Fecha'];
			$NumeroFactura	=	$data['NumeroFactura'];
			
			
			if(is_numeric($Importe) and is_numeric($OrdenDePagoId) 
				and isset($Fecha) and ($Fecha != 'Fecha factura'))
			{
			
				$liquidacion	=	new Liquidacion();
				$liquidacion->OrdenDePagoId	=	$OrdenDePagoId;
				$liquidacion->Importe	=	$Importe;
				$liquidacion->NumeroFactura	=	$NumeroFactura;
				$liquidacion->Detalle	=	$Detalle;
				$liquidacion->FechaFactura	=	$Fecha;
				
				$liquidacion->save();
				
				return true;
			}
		}
		return false;
		*/
	}
	/*
	public function GetTotalLiquidaciones()
	{
		$liq	=	$this->Liquidaciones;
		$total	=	0;
		
		foreach($liq as $l)
		{
			$total	= $total + $l->Importe;
		}
		
		return $total;
	}
	*/
	public function GetResumen()
	{
		$resumen	=	array();
		
		$resumen['OrdenDePagoId']	=	$this->Numero;
		$resumen['Fecha']	=	$this->Fecha;
		$resumen['Proveedor']	=	$this->GetNombreProveedor();
		
		// liquidacion: ordenes de compra  o facturas de compra
		$resumen['Liquidaciones']	=	$this->GetFacturasDeCompraLiquidadas();
		$resumen['OrdenesDeCompra']	=	$this->GetOrdenesDeCompraLiquidadas();
		$resumen['TotalLiquidaciones']	=	$this->GetImporteLiquidado();
		
		$resumen['Pagos']	=	$this->Pagos;
		$resumen['TotalPago']	=	$this->GetPagoTotal();
		
		$resumen['Comentario']	=	$this->Comentario;
		
		return $resumen;
	}
	
	private function GetNombreProveedor()
	{
		if($this->Proveedor)
			return $this->Proveedor->Nombre;
			
		return 'Debe asociar un proveedor a la orden de trabajo';
	}
	
	public function GetOneOrdenDeCompra()
	{
		$OrdenesDeCompras	=	$this->OrdenesDeCompra;
    	
    	foreach($OrdenesDeCompras as $i)
    	{
    		return $i;
    	}
	}
	
	/* todas las OC cuyo importe abonado sea menor al importe de la OC */
	/* @deprecated: las ordenes de compra pendientes las devuelve el Proveedor
	 * 
	 *
	public function GetOrdenesDeCompraPendientes()
	{
		$filters		=	array();
		$filters['ProveedorId']	=	$this->ProveedorId;
		
		$query		= Doctrine::getTable('OrdenDeCompra')->GetPendientes( $filters );
		$ordenes = $query->execute();
		
		$ordenesCompraPendientes = array();
		
		foreach($ordenes as $o)
		{
			if($o->IsPendienteDeLiquidar())	
				$ordenesCompraPendientes[] = $o;
			
		}
		
		
		return $ordenesCompraPendientes;
	}
	*/
	
	public function	EliminarOrdenDeCompra($ordendecompraid)
	{
		$this->EliminarOrdenDePagoOrdenDeCompra($ordendecompraid);
		/*
		$OrdenDeCompra		= Doctrine::getTable('OrdenDeCompra')->FindOneById( $ordendecompraid );
		
		if(is_object($OrdenDeCompra))
		{
			$OrdenDeCompra->OrdenDePagoId	=	null;
			$OrdenDeCompra->save();
		}
		*/
	}
	/*
	public function	EliminarOrdenDePagoOrdenDeCompra($ordendepagoordendecompraid)
	{
		$opoc		= Doctrine::getTable('OrdenDePagoOrdenDeCompra')->FindOneById( $ordendepagoordendecompraid );
		
		if(is_object($opoc))
		{
			$opoc->delete();
		}
		else
			echo 'La orden de compra con el importe no exite';
	}
	*/
	/*
	public function GetTotalOrdenesDeCompra()
	{
		$ordenes =	$this->OrdenesDeCompra;
		
		$total = 0;
		foreach($ordenes as $o)
		{
			$total += $o->GetOneInsumo()->GetTotal();
		}
		
		return $total;
	}
	*/
	
	/* pago parcial */
	/*
	public function PagarOrdenDeCompra($OrdenDeCompraId, $data)
	{
		if(is_numeric($OrdenDeCompraId))
		{
			$oc		= Doctrine::getTable('OrdenDeCompra')->FindOneById($OrdenDeCompraId);
			if($this->EstaAgregada($oc))
			{
				throw new Exception('La orden de compra ya esta agregada a la orden de pago');
			}
			
			if(is_object($oc) and isset($data['ImporteAbonado']) and is_numeric($data['ImporteAbonado']))
			{
				$orden = new OrdenDePagoOrdenDeCompra();
				$orden->OrdenDePagoId = $this->Id;
				$orden->OrdenDeCompraId	=	$oc->Id;
				$orden->ImporteAbonado	=	$data['ImporteAbonado'];
				
				$orden->save();
			}
			else
				throw new Exception('La orden de compra buscada no existe. Verifique el id');			
		}	
	}
	*/
	// usado en OrdenDePago/View
	public function GetOrdenesDeCompraLiquidadas()
	{
		//return $this->OrdenDePagoOrdenDeCompra;
		//return $this->GetLiquidacionOrdenesDeCompra();
		
		$q  =   Doctrine_Query::create()
					->select('*')
                    ->from('OrdenDeCompra o')
                    ->innerJoin('o.Insumo i')
                    ->innerJoin('o.OrdenDePagoOrdenDeCompra opoc')
                    ->andWhere('opoc.ordendepagoid = ?', $this->Id)
                    //->andWhere('o.fechaanulacion IS NULL')
                    ->orderBy('o.fecha ASC');
           //echo $q->getSqlQuery();         
        return $q->execute();          
		//return $this->OrdenesDeCompra;
	}
	
	public function GetTotalOrdenesDeCompraAgregadas()
	{
		//$ordenes =	$this->GetOrdenesDeCompraAgregadas();
		$ordenes = $this->OrdenDePagoOrdenDeCompra;
		
		$total = 0;
		foreach($ordenes as $o)
		{
			if($o->OrdenDePagoId == $this->Id)
				$total += $o->ImporteAbonado;
		}
		
		return $total;
	}
	
	public function EstaAgregada($OrdenDeCompra)
    {
    	$q  =   Doctrine_Query::create()
                    ->from('OrdenDePagoOrdenDeCompra opoc')
                    ->andWhere('opoc.ordendepagoid = ?', $this->Id)
                    ->andWhere('opoc.ordendecompraid = ?', $OrdenDeCompra->Id);
        if(count($q) > 0)
        	return true;
        	
        return false;
    }
    
    /*
     * @deprecated 28/2/2012
     *
    
    public function Anular()
    {
    	$ordenes = $this->OrdenDePagoOrdenDeCompra;
    	
    	foreach($ordenes as $a)
    	{
    		$a->ImporteAbonado = 0.0;
    		$a->save();
    	}
    }
    */
    
    /* es importe de la factura puede ser pedido antes de ser guardada la
     * orden de pago
     * 
     */
    public function GetImporteLiquidadoFacturasCompra()
    {
    	$total = 0;
    	$liquidacion	=	$this->GetLiquidacionFacturasCompra();
    	if(count($liquidacion) > 0)
    	{
    		foreach ($liquidacion as $o)
    		{
    			$total = $total + $o->ImporteLiquidado;
    		}
    	}
    	else
    	{
    		// se liquida en session
    		$s = new Classes_Session();
    		return $s->GetImporteLiquidadoOrdenDePago();
    	}
    	return $total;
    }
    
    public function GetLiquidacionFacturasCompra()
    {
    	$q	=	Doctrine_Query::create()
    	->from('OrdenDePagoFacturaCompra opfc')
    	->andWhere('opfc.OrdenDePagoId = ?', $this->Id);
    
    	//echo 'hacer DER: ' . $q->getsqlquery();
    
    	return $q->execute();
    }
    
    /*
     * Al anular una OP
     * - las facturas de compra asociadas a la liquidacion quedan nuevamente pendientes de pago
     * - las ordenes de compra asociadas a la liquidacion quedan nuevamente pendientes de pago
     * - borrar las liquidaciones
     * 	- al anular una OP con cheque propio o tercero, anular cheque
     * 			- permitir anular OP si fue debitado el cheque propio?
		- al anular OP con transferencia, modificar saldo bancario
		- al anular OP con efectivo, modificar saldo efectivo
		- al anular OP con retencion, dejar vigente nuevamente la retencion"
     */
    public function Anular()
    {
    	$this->FechaAnulacion = date('d/m/Y H:i:s');
    	$this->save();
    
    	$liq	=	$this->GetLiquidacionFacturasCompra();
    	
    	if(count($liq) > 0)
    	{
	    	foreach($liq as $l)
	    	{
	    		$filters	=	array();
	    		$filters['Numero']	=	$l->FacturaNumero;
	    		$filters['TipoIvaId']	=	$l->TipoIvaId;
	    		$filters['ProveedorId']	=	$l->ProveedorId;
	    		
	    		$FacturaCompra		= Doctrine::getTable('FacturaCompra')->BuscarFactura( $filters );
	    		
	    		 
	    		if(is_object($FacturaCompra))
	    		{
	    			$FacturaCompra->PendienteDePago	=	'SI';
	    			$FacturaCompra->save();
	    		}
	    		
	    		$l->delete();
	    	}
    	}
    	
    	$ordenes	=	$this->GetLiquidacionOrdenesDeCompra();
    	 
    	if(count($ordenes) > 0)
    	{
    		foreach($ordenes as $o)
    		{
    			$OrdenDeCompra		= Doctrine::getTable('OrdenDeCompra')->FindOneById( $o->OrdenDeCompraId );
    			
    			if(is_object($OrdenDeCompra))
    			{
    				$OrdenDeCompra->PendienteDePago	=	'SI';
    				$OrdenDeCompra->save();
    			}
    			
    			$o->delete();
    		}
    	}
    	
    	$g	=	new Classes_GestionEconomicaManager();
    	$g->AnularOrdenDePago($this);
    	
    	return $this;
    }
    
    /* utilizada en transaccion Proveedor->CrearOrdenDePago()
     * 28/2/2013
     */
    public function AgregarLiquidacionFacturasCompra()
    {
    		
    	// obtener facturas de compra agregadas en session
    	$s = new Classes_Session();
    	$s->Session();
    		
    
    	foreach ($_SESSION["FacturasDeCompraArray"] as $o)
    	{
    		$l = new OrdenDePagoFacturaCompra();
    			
    		$l->OrdenDePagoId = $this->Id;
    		$l->FacturaNumero = $o['FacturaNumero'];
    		$l->ProveedorId = $this->ProveedorId;
    		$l->TipoIvaId	=	$o['TipoIvaId'];
    		$l->ImporteLiquidado = $o['ImporteLiquidado'];
    		$l->FechaGrabacion = date('Y-m-d H:i:s');
    		
    		$l->save();
    		//print_r($o);
    	}
    		
    		
    	// liberar ordenes de compra de session
    	$s->LimpiarFacturasDeCompraLiquidacionOrdenDePago();
    }
    
    public function GetImporteLiquidado()
    {
    	return $this->GetImporteLiquidadoFacturasCompra() + $this->GetImporteLiquidadoOrdenesDeCompra();
    }
    
    public function GetFacturasDeCompraLiquidadas()
    {
    	$q	=	Doctrine_Query::create()
	    	->from('OrdenDePagoFacturaCompra fcoc')
	    	->andWhere('fcoc.OrdenDePagoId = ?', $this->Id);
    
    	//echo 'GetFacturasDeCompraLiquidadas()'.$q->getsqlquery();
    	return $q->execute();
    
    }
    
    public function GetImportePagado()
    {
    	$importe	=	$this->GetPagoTotal();
    }
    
    public function GetImporteRestante()
    {
    	return $this->GetImporteLiquidadoFacturasCompra()-$this->GetImportePagado();
    }
    
    /* utilizada en transaccion Proveedor->CrearOrdenDePago()
     * 10/3/2013
     */
    public function AgregarDetalleDePago()
    {
    	// obtener pagos agregadas en session y agregarlos
    	$s = new Classes_Session();
    	$s->Session();
    
    	if(count($_SESSION["PagosArray"]) == 0)
    		throw new Exception('Debe ingresar detalle de pago.');
    	
    	foreach ($_SESSION["PagosArray"] as $o)
    	{
    		$l = new Pago();
    			
    		$l->OrdenDePagoId = $this->Id;
    		$l->Detalle = $o['Detalle'];
    		$l->Importe	=	$o['Importe'];
    		$l->PagoTipoId = $o['PagoTipoId'];
    		$dateHelper =   new Classes_DateHelper();
    		// fecha de emision
    		$l->FechaCheque = $dateHelper->fromViewFormat($o['FechaCheque']);
    		
    		// si es un tipo de pago: Cheque propio (id = 1),
    		// - crear cheque (indicar si es Blanco o negro) segun el tipo de OP
    		if($o['PagoTipoId'] == 1)
    		{
    			if(isset($o['Banco']))
    			{
    				$banco		= Doctrine::getTable('Banco')->FindOneById($o['Banco']);
    				if(!is_object($banco))
    					throw new Exception('El codigo de banco ingresado no existe');
    			
	    			$c	=	new Cheque();
	    			$c->FechaCreacion	=	date('d/m/Y');
	    			$c->Importe	= $o['Importe'];
	    			$c->BancoId	= $banco->Id;
	    			$c->BancoCodigo	= $banco->Codigo;
	    			$c->Sucursal	=	$o['Sucursal'];
	    			$c->Numero	= $banco->GetProximoNumeroDeCheque();
	    			$c->Cuenta	=$banco->NumeroDeCuenta;
	    			$c->FechaEmision	= $o['FechaCheque'];
	    			$c->FechaCobro	=$o['FechaCobro'];
	    			
	    			$c->Firmante	=$banco->GetFirmanteDeCheques();
	    			$c->CUIT	=$banco->CUIT;
	    			$c->Estado = 'Pendiente debitar';
	    			// determinar tipo de cheque (B o N)
	    			$c->Tipo	=	$this->TipoDePago;
	    			// determinar si es cheque tercero o propio (siempre que cobro es de tercero)
	    			$c->EsPropio	=	true;
	    			$c->ProveedorId	=	$this->ProveedorId;
	    			
	    			$c->save();
	    			
	    			$l->ChequeId	=	$c->Id;
	    			
	    			// actualizar ultimo numero de cheque asignado
	    			$banco->ActualizarUltimoNumeroDeCheque();
    			}
    			
    		}
    		// si pago con cheque tercero en cartera, cambiar estado
    		if($o['PagoTipoId'] == 4)
    		{
    			$Cheque		= Doctrine::getTable('Cheque')->FindOneById($o['ChequeId']);
    			if(!is_object($Cheque))
    				throw new Exception('No existe el cheque abonado para cambiar a estado Pagado');
    			
    			$Cheque->Estado	=	'Pagado';
    			$Cheque->ProveedorId	=	$this->ProveedorId;
    			$Cheque->save();
    			
    			$l->ChequeId	=	$Cheque->Id;
    		}
    		
    		// si pago con retencion
    		if(($o['PagoTipoId'] == 6)||($o['PagoTipoId'] ==7)||($o['PagoTipoId'] == 8)
    				||($o['PagoTipoId'] == 9)||($o['PagoTipoId'] == 10)||($o['PagoTipoId'] == 11))
    		{
    			$Pago		= Doctrine::getTable('CobranzaDetalle')->FindOneById($o['RetencionId']);
    			if(!is_object($Pago))
    				throw new Exception('No existe la retencion');
    			// se marca la retencion utilizada
    			$Pago->RetencionUtilizada	=	'SI';
    			$Pago->save();
    			// como se genera un nuevo pago con retencion utilizada para el pago a AFIP,
    			// debe marcarse para que no quede pendiente de pago
    			$l->RetencionUtilizadaId	=	$Pago->Id;
    		}
    		
    		// si pago con percepcion
    		if(($o['PagoTipoId'] == 14)||($o['PagoTipoId'] ==15)||($o['PagoTipoId'] == 16))
    		{
    			$Pago		= Doctrine::getTable('Percepcion')->FindOneById($o['PercepcionId']);
    			if(!is_object($Pago))
    				throw new Exception('No existe la percepcion');
    			// se marca la retencion utilizada
    			$Pago->FechaUtilizacion	=	date('Y-m-d');
    			$Pago->save();
    		}
    		
    		// si pago con NC o ND
    		if(($o['PagoTipoId'] == 12))
    		{
    			$nc		= Doctrine::getTable('FacturaCompra')->FindOneByNumeroInterno($o['NotaCreditoId']);
    			if(!is_object($nc))
    				throw new Exception('No existe la nota de credito o debito');
    			// se marca la retencion utilizada
    			$nc->OrdenDePagoId	=	$this->Id;
    			$nc->save();
    		}
    		
    		// si es efectivo, decrementar saldo en efectivo
    		if($o['PagoTipoId'] == 2)
    		{
    			$Configuracion = Doctrine::GetTable ( 'Configuracion' )->FindOneByNombre('SaldoEfectivo');
    			$Configuracion->Valor -=	$o['Importe'];
    			$Configuracion->save();
    			
    			$data['Detalle'] = 'OP #' . $this->Id . ' - ' .$l->Detalle;
    			$data['Importe']	=	$l->Importe;
    			$data['Saldo']	=	$Configuracion->Valor;
    			$data['Haber']	=	$data['Importe'];
    			
    			$g = new Classes_GestionEconomicaManager();
    			$g->AddHistorialEfectivo($data);
    		}
    		
    		// si es un tipo de pago: transferencia (id = 13),
    		// - actualizar saldo de la cuenta de banco asociada
    		if($o['PagoTipoId'] == 13)
    		{
    			if(isset($o['Banco']))
    			{
    				
    				$banco		= Doctrine::getTable('Banco')->FindOneById($o['Banco']);
    				if(!is_object($banco))
    					throw new Exception('El banco ingresado no existe');
    		
    				// modiifcar saldo del banco con el importe del cheque creado
    				$ctacte		=	new Classes_CuentaCorrienteManager();
    				$data['Haber']	=	$o['Importe'];
    				$data['Saldo']	=	$banco->SaldoCuenta;
    				$data['BancoId']	=	$banco->Id;
    				$data['Detalle']	=	'Tranferencia bancaria de OP '.$this->Numero;
    				$ctacte->AddConceptoBancoCuentaCorriente($data);
    			}
    		}    		
    		
    		$l->save();
    		//print_r($o);
    	}
    		
    		
    	// liberar pagos de session
    	$s->LimpiarPagosLiquidacionOrdenDePago();
    }
    
    public function AgregarLiquidacionOrdenesDeCompra()
    {
    	// obtener ordenes de compra agregadas en session y agregarlos
    	$s = new Classes_Session();
    	$s->Session();
    	
    	if(isset($_SESSION["OrdenesDeCompraArray"] ))
    	{
	    	foreach ($_SESSION["OrdenesDeCompraArray"] as $o)
			{
				$l = new OrdenDePagoOrdenDeCompra();
				
				$l->OrdenDePagoId = $this->Id;
				$l->ImporteAbonado = $o['ImporteLiquidado'];
				$l->OrdenDeCompraId = $o['OrdenDeCompraId'];
				
				if($l->ImporteAbonado <= 0)
					throw new Exception('El importe liquidado de la orden orden de compra no puede ser $'. $l->ImporteLiquidado );
				
				if ($l->TotalLiquidadoSuperaImporteTotal())
				{
					throw new Exception('El total liquidado de la orden de compra supera el importe total. Debe crear una orden de compra por la diferencia');
				}
				
				$l->save();
				//print_r($o);
			}
    	}
    	$s->LimpiarOrdenesDeCompraLiquidacionOrdenDePago();
    }
    
    public function GetDetalleDePago()
    {
    	return $this->Pagos;
    }
    
    public function GetImporteLiquidadoOrdenesDeCompra()
    {
    	$total = 0;
    	$liquidacion	=	$this->GetLiquidacionOrdenesDeCompra();
    	if(count($liquidacion) > 0)
    	{
    		foreach ($liquidacion as $o)
    		{
    			$total = $total + $o->ImporteAbonado;
    		}
    	}
    	else
    	{
    		// se liquida en session
    		$s = new Classes_Session();
    		return $s->GetImporteLiquidadoOrdenDePago();
    	}
    	return $total;
    }
    
    public function GetLiquidacionOrdenesDeCompra()
    {
    	//return $this->OrdenDePagoOrdenDeCompra;
    	$q	=	Doctrine_Query::create()
    	->from('OrdenDePagoOrdenDeCompra opoc')
    	->andWhere('opoc.OrdenDePagoId = ?', $this->Id);
    	
    	return $q->execute();
    }
    
    public function GetTextDetalleLiquidacion()
    {
    	$facturasCompra	=	$this->GetFacturasDeCompraLiquidadas(); //OrdenDePagoFacturaCompra
    	$ordenesDeCompra	=	$this->GetLiquidacionOrdenesDeCompra(); //OrdenDePagoOrdenDeCompra
    	
    	$detalle	=	'';
    	
    	foreach($facturasCompra as $f)
    	{
    		$detalle	=	$detalle . 'FC '. $f->FacturaNumero . ' ( $'. $f->ImporteLiquidado .' )<br>';
    	}
    	
    	foreach($ordenesDeCompra as $oc)
    	{
    		$detalle	=	$detalle . 'OC '. $oc->OrdenDeCompraId . ' ( $'. $oc->ImporteAbonado .' )<br>';
    	}
    	
    	return $detalle;
    }
    
    /*
     * existe distinta numeracion segun el tipo de pago
    * Tipo Negro o Interna
    * Tipo Blanco o Externa
    */
    public function GetProximoNumero()
    {
    	if($this->GetTipoSegunLiquidacion() == 'B')
    	{
    		// obtener ultimo numero en blanco
    		return $this->GetUltimoNumeroExterno() + 1;
    	}
    		
    	if($this->GetTipoSegunLiquidacion() == 'N')
    	{
    		// obtener ultimo numero en negro
    		return $this->GetUltimoNumeroInterno() + 1;
    	}
    }
    
    public function GetTipoSegunLiquidacion()
    {
    	// segun liquidacion (ordenes de compra o facturas de compra - N o B)
    	$s = new Classes_Session();
		$facturas	=	$s->GetFacturasDeCompraLiquidadas();
		$ordenesDeCompra	=	$s->GetOrdenesDeCompraLiquidadas();
		
		foreach($facturas as $f)
		{
			$tipoIva		= Doctrine::getTable('TipoIva')->findOneById( $f['TipoIvaId'] );
			if(! $tipoIva)
				throw new Exception('El tipo de iva no existe para determinar el tipo de orden de pago');
				
			if(($tipoIva->GetLetraFactura() == 'A') or ($tipoIva->GetLetraFactura() == 'B') or 
					($tipoIva->GetLetraFactura() == 'C'))
				return 'B';
			
			if($tipoIva->GetLetraFactura() == 'N')
				return 'N';
		}
		
		foreach($ordenesDeCompra as $oc)
		{
			$orden		= Doctrine::getTable('OrdenDeCompra')->findOneById( $oc['OrdenDeCompraId'] );
			if(! $orden)
				throw new Exception('La orden de compra no existe para determinar el tipo de orden de pago');
		
			$letra	=	$orden->GetLetraTipoIva();
			if(($letra == 'A') or ($letra == 'B') or
					($letra == 'C'))
				return 'B';
				
			if($letra == 'N')
				return 'N';
		}
    }
    
    
    public function GetUltimoNumeroInterno()
    {
    	$q	=	Doctrine_Query::create()
    	->select('c.Id')
    	->from('OrdenDePago c')
    	->andWhere('c.TipoDePago = ?', 'N')
    	->orderBy('c.Id DESC')
    	->limit(1);
    
    
    	$op	=	$q->fetchOne();
    	if(is_object($op))
    		return $op->Numero;
    
    	$factory	= IDS_Factory_Manager::GetFactory();
    	$config		= $factory->GetConfig();
    
    	$Default	=	$config->Get('bussiness.numeroordendepagoN');
    
    	if(isset($Default) and is_numeric($Default))
    		return $Default;
    	else
    		return 999999;
    }
    
    public function GetUltimoNumeroExterno()
    {
    	$q	=	Doctrine_Query::create()
    	->select('c.Id')
    	->from('OrdenDePago c')
    	->andWhere('c.TipoDePago = ?', 'B')
    	->orderBy('c.Id DESC')
    	->limit(1);
    
    
    	$op	=	$q->fetchOne();
    	if(is_object($op))
    		return $op->Numero;
    
    	$factory	= IDS_Factory_Manager::GetFactory();
    	$config		= $factory->GetConfig();
    
    	$Default	=	$config->Get('bussiness.numeroordendepagoB');
    
    	if(isset($Default) and is_numeric($Default))
    		return $Default;
    		
    	return 0;
    }
    
}
<?php

/**
 * Cheque
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
class Cheque extends BaseCheque
{
	public function setUp()
	{
		parent::setUp();
	
	
		//$this->hasAccessorMutator('FechaAnulacion', 'FechaAnulacionAccessor', 'FechaAnulacionMutator');
	
		$this->hasAccessorMutator('FechaCreacion', 'FechaCreacionAccessor', 'FechaCreacionMutator');
		$this->hasAccessorMutator('FechaEmision', 'FechaEmisionAccessor', 'FechaEmisionMutator');
		$this->hasAccessorMutator('FechaCobro', 'FechaCobroAccessor', 'FechaCobroMutator');
		$this->hasAccessorMutator('FechaVencimiento', 'FechaVencimientoAccessor', 'FechaVencimientoMutator');
	}
	
	public function preInsert($event)
	{
		$dateHelper = new Classes_DateHelper();
		// 30 dias corridos a partir de la fecha de cobro
		$dias = 29;
		
		$this->FechaVencimiento	= date("d/m/Y",
				strtotime($dateHelper->fromViewFormat($this->FechaCobro) . " +".$dias." day"));
	}
	
	public function FechaCreacionMutator( $value )
	{
		$dateHelper =   new Classes_DateHelper();
		$date 	=	$dateHelper->fromViewFormat($value);
		 
		 
		$this->_set('FechaCreacion', $date);
	}
	
	public function FechaCreacionAccessor()
	{
		$timestamp	=	$this->_get('FechaCreacion');
		 
		if ($timestamp)
		{
			// convertir timestamp a dd/mm/aaaa
			$dateHelper =   new Classes_DateHelper();
			 
			$date 	=	$dateHelper->toViewFormat($timestamp);
			 
			return substr($date, 0, 10);
		}
		else
			return '';
	}
	
	public function FechaCobroMutator( $value )
	{
		$dateHelper =   new Classes_DateHelper();
		$date 	=	$dateHelper->fromViewFormat($value);
			
			
		$this->_set('FechaCobro', $date);
	}
	
	public function FechaCobroAccessor()
	{
		$timestamp	=	$this->_get('FechaCobro');
			
		if ($timestamp)
		{
			// convertir timestamp a dd/mm/aaaa
			$dateHelper =   new Classes_DateHelper();
	
			$date 	=	$dateHelper->toViewFormat($timestamp);
	
			return substr($date, 0, 10);
		}
		else
			return '';
	}
	public function FechaEmisionMutator( $value )
	{
		$dateHelper =   new Classes_DateHelper();
		$date 	=	$dateHelper->fromViewFormat($value);
			
			
		$this->_set('FechaEmision', $date);
	}
	
	public function FechaEmisionAccessor()
	{
		$timestamp	=	$this->_get('FechaEmision');
			
		if ($timestamp)
		{
			// convertir timestamp a dd/mm/aaaa
			$dateHelper =   new Classes_DateHelper();
	
			$date 	=	$dateHelper->toViewFormat($timestamp);
	
			return substr($date, 0, 10);
		}
		else
			return '';
	}
	
	public function FechaVencimientoMutator( $value )
	{
		$dateHelper =   new Classes_DateHelper();
		$date 	=	$dateHelper->fromViewFormat($value);
			
			
		$this->_set('FechaVencimiento', $date);
	}
	
	public function FechaVencimientoAccessor()
	{
		$timestamp	=	$this->_get('FechaVencimiento');
			
		if ($timestamp)
		{
			// convertir timestamp a dd/mm/aaaa
			$dateHelper =   new Classes_DateHelper();
	
			$date 	=	$dateHelper->toViewFormat($timestamp);
	
			return substr($date, 0, 10);
		}
		else
			return '';
	}
	public function FechaAnulacionMutator( $value )
	{
		$dateHelper =   new Classes_DateHelper();
		$date 	=	$dateHelper->fromViewFormat($value);
		 
		 
		$this->_set('FechaAnulacion', $date);
	}
	
	public function FechaAnulacionAccessor()
	{
		$timestamp	=	$this->_get('FechaAnulacion');
		 
		if ($timestamp)
		{
			// convertir timestamp a dd/mm/aaaa
			$dateHelper =   new Classes_DateHelper();
			 
			$date 	=	$dateHelper->toViewFormat($timestamp);
			 
			return $date;
		}
		else
			return '';
	}
	
	public function GetNombreBanco()
	{
		$q	=	Doctrine_Query::create()
		->from('Banco b')
		->andWhere('b.Codigo = ?', $this->BancoCodigo)
		->limit(1);
		
		$banco	=	$q->fetchOne();
		
		if(is_object($banco))
			return $banco->Nombre;

		return '(Codigo de banco no encontrado)';
	}
	
	// si pertenece a OP, no puede
	// si pertenece a CO, no puede
	// si fue depositado, no puede
	public function GetPuedeAnularse()
	{
		$a	=	new Classes_Session();
		return $a->GetUser()->IsPerfilAdministrador();
	}
	
	public function Anular()
	{
		$this->Estado = 'Anulado';
		$this->save();
	}
	
}
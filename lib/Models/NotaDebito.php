<?php

/**
 * NotaDebito
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
class NotaDebito extends BaseNotaDebito
{
	public function setUp()
	{
		parent::setUp();
	
	
		//$this->hasAccessorMutator('FechaAnulacion', 'FechaAnulacionAccessor', 'FechaAnulacionMutator');
	
		$this->hasAccessorMutator('Fecha', 'FechaAccessor', 'FechaMutator');
		//$this->hasAccessor('Fecha', 'FechaAccessor');
	}
	
	public function FechaMutator( $value )
	{
		$dateHelper =   new Classes_DateHelper();
		$date 	=	$dateHelper->fromViewFormat($value);
		 
		 
		$this->_set('Fecha', $date);
	}
	
	public function FechaAccessor()
	{
		$timestamp	=	$this->_get('Fecha');
		 
		if ($timestamp)
		{
			// convertir timestamp a dd/mm/aaaa
			$dateHelper =   new Classes_DateHelper();
			 
			$date 	=	$dateHelper->toViewFormat($timestamp);
			 
			return substr($date, 0, 10);
		}
		else
			return '';
	}
	
	public function GetUltimoNumero()
	{
		$query	=	"
		select nd.id Numero
		from nota_debito nd
		order by id DESC
		limit 1
		";
		
		//Assume that you have connected to a database instance...
		$statement = Doctrine_Manager::getInstance()->connection();
		//$results = $statement->execute("SELECT * FROM paciente WHERE id = ?", array(1));
		$results = $statement->execute($query);
		$dataset	=	$results->fetchAll();
		//var_dump($dataset);
		return $dataset[0]['Numero'];
	}
	
	public function GetUltimoNumeroInterno()
	{
		$q	=	Doctrine_Query::create()
		->from('NotaDebito c')
		->andWhere('c.Tipo = ?', 'N')
		->orderBy('c.Id DESC')
		->limit(1);
	
	
		$cobranza	=	$q->fetchOne();
		if(is_object($cobranza))
			return $cobranza->Numero;
	
		return 9999999;
	}
	
	public function GetUltimoNumeroExterno()
	{
		$q	=	Doctrine_Query::create()
		->from('NotaDebito c')
		->andWhere('c.Tipo = ?', 'B')
		->orderBy('c.Id DESC')
		->limit(1);
	
	
		$cobranza	=	$q->fetchOne();
		if(is_object($cobranza))
			return $cobranza->Numero;
	
		return 0;
	}
	
	public function Anular()
	{
		$this->FechaAnulacion	=	date('d/m/Y H:i:s');
		$this->save();
	
		// eliminar o anular liquidaciones y pagos
	
	}
	
	public function Create($data)
	{
		if(isset($data))
		{
			$c	=	new NotaDebito();
	
			if(isset($data['ClienteId']) and is_numeric($data['ClienteId']))
			{
				$clienteId	=	$data['ClienteId'];
				$cliente	=	Doctrine::getTable('Cliente')->FindOneById($clienteId);
	
				if(is_object($cliente))
				{
					$c->Numero	=	$this->GetUltimoNumeroExterno() + 1;
	
					$c->Fecha	=	$data['Fecha'];
					$c->Tipo	=	'B';
					$c->ClienteId	=	$data['ClienteId'];
					$c->TipoIvaId	=	$data['TipoIvaId'];
					$c->Importe	=	$data['Importe'];
					$c->ImporteRechazo	=	$data['ImporteRechazo'];
					$c->Comentario	=	$data['Comentario'];
	
					$c->save();
	
					return $c;
				}
				else
					echo 'Error: el objeto cliente no fue encontrado';
	
			}
		}
	}
	
	public function GetSubtotal()
	{
		return $this->Importe + $this->ImporteRechazo;
	}
	
	public function GetTotalIva()
	{
		$importe = number_format($this->Importe + $this->ImporteRechazo + $this->GetImporteIva(),2,'.','');
		return $importe;
	}
	
	public function GetImporteIva()
	{
		$importe = number_format(($this->TipoIva->GetPorcentajeIva()/100)*$this->ImporteRechazo,2,'.','');
		return $importe;
	}
	
}
<?php

/**
 * FacturaCompra
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
class FacturaCompra extends BaseFacturaCompra
{
	
	public function setUp()
	{
		parent::setUp();
	
		$this->hasAccessorMutator('Fecha', 'FechaAccessor', 'FechaMutator');
		$this->hasAccessorMutator('FechaVencimiento', 'FechaVencimientoAccessor', 'FechaVencimientoMutator');
		//$this->hasAccessor('FechaGrabacion');
	}
	
	public function preInsert( $event)
	{
		$invoker = $event->getInvoker();
		// una factura puede haberse pagada totalmente como anticipo, 
		// entonces marcala com pagada al crearla
		$this->ControlarPagoDeFactura();
	}
	
	public function ControlarPagoDeFactura()
	{
		// una factura de compra puede pagarse como anticipos de ordenes de compra
		// o con pagos parciales
		if(!$this->IsPendienteDePago())
		{
			$this->PendienteDePago = 'NO';
		}
	}
	
	public function FechaAccessor()
	{
		$timestamp	=	$this->_get('Fecha');
			
		if ($timestamp)
		{
			$date 	=	new Classes_DateHelper();
	
			return $date->toViewFormat($timestamp);
		}
		else
			return '';
	}
	
	
	public function FechaMutator( $value )
	{
		$date 	=	new Classes_DateHelper();
	
		$this->_set('Fecha', $date->fromViewFormat($value));
	}
	
	public function FechaVencimientoAccessor()
	{
		$timestamp	=	$this->_get('FechaVencimiento');
	
		if ($timestamp)
		{
			$date 	=	new Classes_DateHelper();
			 
			return $date->toViewFormat($timestamp);
		}
		else
			return '';
	}
	
	
	public function FechaVencimientoMutator( $value )
	{
		$date 	=	new Classes_DateHelper();
	
		$this->_set('FechaVencimiento', $date->fromViewFormat($value));
	}
	
	
	public function FechaGrabacionAccessor()
	{
		$timestamp	=	$this->_get('Fecha');
		 
		if ($timestamp)
		{
			$date 	=	new Classes_DateHelper();
			 
			return $date->toViewFormat($timestamp);
		}
		else
			return '';
	}
	
	/*
	public function FechaGrabacionMutator( $value )
	{
		$date 	=	new Classes_DateHelper();
	
		$this->_set('Fecha', $date->fromViewFormat($value));
	}
	*/
	// importe pendiente de validar
	public function GetImportePendiente()
	{
		return ($this->Importe - $this->GetImporteLiquidado());
		//return ($this->Importe - $this->GetImporteLiquidado());
	}
	
	// obtenes todos los ids de ordenes de compra asociadas a una factura de compra
	public function GetOrdenesDeCompraLiquidadas()
	{ 
		$q	=	Doctrine_Query::create()
			->from('FacturaCompraOrdenDeCompra fcoc')
			->innerJoin('fcoc.OrdenDeCompra oc')
			->andWhere('fcoc.FacturaNumero = ?', $this->Numero)
			->andWhere('fcoc.ProveedorId = ?', $this->ProveedorId)
			->andWhere('oc.FechaAnulacion IS NULL')
			->andWhere('fcoc.TipoIvaId = ?', $this->TipoIvaId);
		
		//echo 'GetOrdenesDeCompraLiquidadas()'.$q->getsqlquery();
		return $q->execute();
		
	}
	
	/*
	 * sumar el importe liquidado de las Ordenes de compra
	*/
	public function GetImporteLiquidado() // poner nombre GetImporteLiquidadoOrdenDeCompra
	{
		$total = 0.0;
		$ordenes = $this->GetLiquidacion();
		if(count($ordenes) > 0)
		{
			foreach ($ordenes as $o)
			{
				$total = $total + $o->ImporteLiquidado;
			}
		}
		else
		{
			// se liquida en session
			$s = new Classes_Session();
			return $s->GetImporteLiquidadoFacturaCompra();
		}
		
		return $total;
	}
	
	/* se graba cada orden de compra agregada en sesion y se asocia a la factura
	 * 
	 */ 
	public function AgregarLiquidacion()
	{
		 
		// obtener Ordenes de compra agregadas en session
		$s = new Classes_Session();
		$s->Session();
		//$ordenesDeCompraLiquidadas = $s->GetOrdenesDeCompraLiquidadas();
		 
		
		foreach ($_SESSION["OrdenesDeCompraArray"] as $o)
		{
			$l = new FacturaCompraOrdenDeCompra();
			
			$l->FacturaNumero = $this->Numero;
			$l->ProveedorId = $this->ProveedorId;
			$l->TipoIvaId	=	$this->TipoIvaId;
			$l->ImporteLiquidado = $o['ImporteLiquidado'];
			$l->OrdenDeCompraId = $o['OrdenDeCompraId'];
			$l->FechaGrabacion = date('Y-m-d H:i:s');
			
			if($l->ImporteLiquidado <= 0)
				throw new Exception('El importe liquidado de la orden orden de compra no puede ser $'. $l->ImporteLiquidado );
			
			// si es compensatoria, calcular importe compensatorio
			if($o['Compensatoria']=='true')
			{
				
				$oc = Doctrine::GetTable ( 'OrdenDeCompra' )->FindOneById($l->OrdenDeCompraId);
				if(!is_object($oc))
					throw  new Exception('No pudo cargarse la orden de compra');
					
				$totalQueSeDeseaValidar = $l->ImporteLiquidado + $oc->GetTotalValidadoEnFacturaCompra();
				$importeCompensatorio = ($totalQueSeDeseaValidar - $oc->Importe);
				
				// el usuario administrador puede validar por cualquier monto de diferencia. Indte. del MaximoConfigurado
				$s	= new Classes_Session();
				if(!$s->GetUser()->IsPerfilAdministrador())
				{
					// obtener maximo importe compensatorio permitido de configuracion
					$Configuracion = Doctrine::GetTable ( 'Configuracion' )->FindOneByNombre('MaximoImporteCompensatorio');
					if(!is_object($Configuracion))
						throw new Exception('Debe crear el valor de configuracion MaximoImporteCompensatorio');
				 
					$MaximoImporteCompensatorio	=	$Configuracion->Valor;
				
					
					if(abs($importeCompensatorio) > $MaximoImporteCompensatorio)
						throw  new Exception('El importe compensatorio no puede superar el importe maximo permitido ($'.$MaximoImporteCompensatorio.')');
				}	

				$oc->ImporteCompensatorio	=	$importeCompensatorio;
				$oc->save();
			
			}
			// no puede agregarse una liquidacion tal que el pago total pagado de la orden de compra
			// supere el importe de la OC
			// TODO
			//if(($l->SuperaImporteTotal($l->ImporteLiquidado))
				//	throw new Exception('El importe liquidado de la factura #'.$l->FacturaNumero.' supera el importe total a abonar');
			/*
			if ($l->TotalLiquidadoSuperaImporteTotal())
			{
				throw new Exception('El total liquidado de la orden de compra supera el importe total. Debe crear una orden de compra por la diferencia');
			}
			*/
			$l->save();
			//print_r($o);
		}
		 
		 
		// liberar ordenes de compra de session
		$s->LimpiarOrdenDeCompraLiquidacionFacturaCompra();
	}
	// consultado al crear factura, hacer refactor de nombre
	public function GetLiquidacion()
	{
		$q	=	Doctrine_Query::create()
		->from('FacturaCompraOrdenDeCompra fcoc')
		->andWhere('fcoc.FacturaNumero = ?', $this->Numero)
		->andWhere('fcoc.ProveedorId = ?', $this->ProveedorId)
		->andWhere('fcoc.TipoIvaId = ?', $this->TipoIvaId);
	
		//echo $q->getsqlquery();
	
		return $q->execute();
	
	}
	
	/*
	 * una factura de compra esta pendiente de pago cuando:
	 * - la suma total de las liquidaciones es menor que el importe de la FC
	 */
	public function IsPendienteDePago()
	{
		if($this->GetImportePendienteDePago() > 0)
			return true;
		
		return false;		
	}
	
	public function GetImporteLiquidadoEnOrdenDePago()
	{
		$total = 0;
		$liquidacion	=	$this->GetLiquidacionOrdenDePago();
		if(count($liquidacion) > 0)
		{
			foreach ($liquidacion as $o)
			{
				$total = $total + $o->ImporteLiquidado;
			}
		}
		else
		{
			// se liquida en session
			$s = new Classes_Session();
			return $s->GetImporteLiquidadoOrdenDePago();
		}
		return $total;
		
	}
	
	public function GetLiquidacionOrdenDePago()
	{
		$q	=	Doctrine_Query::create()
		->from('OrdenDePagoFacturaCompra opfc')
		->andWhere('opfc.FacturaNumero = ?', $this->Numero)
		->andWhere('opfc.ProveedorId = ?', $this->ProveedorId)
		->andWhere('opfc.TipoIvaId = ?', $this->TipoIvaId);
		
		//echo 'hacer DER: ' . $q->getsqlquery();
		
		return $q->execute();
	}
	
	public function GetImportePendienteEnOrdenDePago()
	{
		return ($this->Importe - $this->GetImporteLiquidadoEnOrdenDePago());
	}
	
	public function Anular()
	{
		$liq	=	$this->GetLiquidacion();
		$per	=	$this->GetPercepciones();
		
		$this->Numero	=	"ANULADA_".$this->Numero;	
		$this->FechaAnulacion = date('Y-m-d H:i:s');
		$this->save();
		
		foreach($liq as $l)
		{
			$l->FacturaNumero	=	$this->Numero;	
			$l->save();
		}
		// anular percepciones
		foreach($per as $p)
		{
			$p->FacturaCompraNumero	=	$this->Numero;
			$p->FechaAnulacion = date('Y-m-d');
			$p->save();
		}
		
		return $this;
	}
	
	public function GetImporteIva()
	{
		// obtener porcentaje de iva
		//$factorIva	=	$this->TipoIva->Discriminado
		//$this->Importe
	}
	
	public function GetTextOrdenesDeCompraLiquidacionOrdenDePago()
	{
		$text	=	'';
		$facturaCompraOrdenesDeCompra	= $this->GetOrdenesDeCompraLiquidadas();
		
		if(count($facturaCompraOrdenesDeCompra) == 0)
			return 'Sin ordenes de compra';
		
		foreach($facturaCompraOrdenesDeCompra as $f)
		{
			$oc		= Doctrine::getTable('OrdenDeCompra')->FindOneById( $f->OrdenDeCompraId );
			if(!is_object($oc))
				throw new Exception('Orden de compra no encontrada');
			
			$i	=	$oc->GetOneInsumo();
			if($i->FechaDeEntrega)
				$entrega	=	$i->FechaDeEntrega;
			else
				$entrega	=	'No entregado';
			
			if($i->FormaDePago)
				$condicionPago	=	$i->FormaDePago;
			else
				$condicionPago	=	'Sin condicion de pago';
			
			$text	=	$text .'#'.$oc->Id.' ('.$entrega.') '.$condicionPago.'<>';
				
		}
		
		return $text;
	}
	
	public function GetTextDetalleLiquidacion()
	{
		$text	=	'';
		$facturaCompraOrdenesDeCompra	= $this->GetOrdenesDeCompraLiquidadas();
		
		if(count($facturaCompraOrdenesDeCompra) == 0)
			return 'Sin ordenes de compra';
		
		foreach($facturaCompraOrdenesDeCompra as $f)
		{
			$text	=	$text .'OC '.$f->OrdenDeCompraId.' ( $'. $f->ImporteLiquidado.' )<br>';
		}
		
		return $text;
	}
	
	public function GetImportePendienteDePago()
	{
		/*
		return number_format(	($this->Importe-
						$this->GetImporteTotalPagado() -
						$this->GetImporteTotalAnticipo()) , 2, '.', '');
						*/
		/*
		echo '('.$this->GetImporteTotal().'-';
		echo $this->GetImporteTotalPagado().'-';
		echo $this->GetImporteTotalAnticipo().')';*/
		
		$importe =  number_format(	($this->GetImporteTotal() - 
								$this->GetImporteTotalPagado() - 
								$this->GetImporteTotalAnticipo()) , 2, '.', '');

		// si la FC fue pagada con OC como anticipo
		if($importe<0)
			return 0.00;
		
		return $importe;
								
	}
	
	// importe pagado en ordenes de pago
	public function GetImporteTotalPagado()
	{
		$total = 0;
		
		// filtrar ordenes de pago anuladas		
		$q	=	Doctrine_Query::create()
		->from('OrdenDePagoFacturaCompra o')
		->innerJoin('o.OrdenDePago op')
		->andWhere('o.FacturaNumero = ?', $this->Numero)
		->andWhere('o.ProveedorId = ?', $this->ProveedorId)
		->andWhere('o.TipoIvaId = ?', $this->TipoIvaId)
		->andWhere('op.FechaAnulacion IS NULL');
		
		$pagos	=	$q->execute();
		
		if(count($pagos)>0)
		{
			foreach ($pagos as $p)
			{
				$total = $total + $p->ImporteLiquidado;
			}
		}
		
		return number_format($total,2, '.','');
	}
	
	/*
	 * sumar importes de ordenes de pago de ordenes de compra liquidadas en
	 * la factura de compra
	 */
	public function GetImporteTotalAnticipo()
	{
		$total = 0;
		$ArrayOrdenesValidadas = array();
		/////////////////////////////////////////////////////////////////////
		// 1) obtener ordenes de compra validadas en la factura
		$validadas	=	$this->GetOrdenesDeCompraValidadas();
		// CONTROL: si no se validaron ordenes (es un pago de servicio), no tiene anticipos
		//if(!$this->TieneOrdenesDeCompraValidadas())
			//return number_format($total,2, '.','');
		/////////////////////////////////////////////////////////////////////
		// 2) sumar importes pagados (si los tuviera) de cada orden de compra 
		if(count($validadas))
		{
			foreach ($validadas as $v)
			{
				// filtrar ordenes de compra anuladas
				if(is_object($v))
					$ArrayOrdenesValidadas[] = $v->OrdenDeCompraId;
				else
					$ArrayOrdenesValidadas[] = $v['OrdenDeCompraId'];
			}
			// obtener todos los pagos de las ordenes validadas
			$q	=	Doctrine_Query::create()
				->from('OrdenDePagoOrdenDeCompra o')
				->innerJoin('o.OrdenDePago op')
				->innerJoin('o.OrdenDeCompra oc')
				->andWhere('op.FechaAnulacion IS NULL')
				->andWhere('oc.FechaAnulacion IS NULL')
				->andWhereIn('o.OrdenDeCompraId', $ArrayOrdenesValidadas);
			//echo $q->getSqlQuery();var_dump($ArrayOrdenesValidadas);
			$ordenes	=	$q->execute();
			
			if(count($ordenes)>0)
			{
				foreach ($ordenes as $opoc)
				{
					$total = $total + $opoc->ImporteAbonado;
				}
			}
		}
		
		return number_format($total,2, '.','');
	}
	
	
	public function TieneOrdenesDeCompraValidadas()
	{
		$ordenes =	$this->GetOrdenesDeCompraValidadas();
		
		if(count($ordenes) > 0)
			return true;
				
		return false;
	}
	
	public function GetOrdenesDeCompraValidadas()
	{	
		// no anuladas
		$q	=	Doctrine_Query::create()
			->from('FacturaCompraOrdenDeCompra fcoc')
			->innerJoin('fcoc.OrdenDeCompra oc')
			->andWhere('fcoc.FacturaNumero = ?', $this->Numero)
			->andWhere('fcoc.ProveedorId = ?', $this->ProveedorId)
			->andWhere('oc.FechaAnulacion IS NULL')
			->andWhere('fcoc.TipoIvaId = ?', $this->TipoIvaId);
	
		//echo 'GetOrdenesDeCompraLiquidadas()'.$q->getsqlquery();
		if(count($q) > 0)
			return $q->execute();
		
		
		// puede estar paga la OC que estoy estoy validando
		$s	=	new Classes_Session();
		$ordenes	=	$s->GetOrdenesDeCompraLiquidadas();
		return $ordenes;
	
	}
	
	public function EstaAnulada()
	{
		if($this->FechaAnulacion)
			return true;
		 
		return false;
	}
	
	public function GetOrdenesDeTrabajoAsociadas()
	{
		$ordenes	=	'';
		$validadas	=	$this->GetOrdenesDeCompraValidadas();
		
		foreach($validadas as $v)
		{
			if(is_object($v->OrdenDeCompra))
				$ordenes	=	'<br>(OT '.$v->OrdenDeCompra->GetOrdenDeTrabajo()->Id . ')<br>';
		}
		
		return $ordenes;
	}
	
	public function GetImporteTotal()
	{
		$importe = number_format($this->ImporteNetoNoGravado + 
				$this->ImporteIva10_5 +
				$this->ImporteIva21 +
				$this->ImporteIva27 +
				$this->ImporteNetoGravado10_5 +
				$this->ImporteNetoGravado21 + 
				$this->ImporteNetoGravado27 +
				$this->ImportePercepcionesIngresosBrutosBsAs +
				$this->ImportePercepcionesIngresosBrutosCaba +
				$this->ImportePercepcionesIva +
				$this->ImporteCreditoACuenta
				,2, '.','');
		
		if($importe>0)
			return $importe;
		
		return $this->Importe;
	}
	
	public function GetImportePercepciones()
	{
		return $this->ImportePercepcionesIngresosBrutosBsAs +
				$this->ImportePercepcionesIngresosBrutosCaba +
				$this->ImportePercepcionesIva;
	}
		
	// consultado al crear factura, hacer refactor de nombre
	public function GetPercepciones()
	{
		$q	=	Doctrine_Query::create()
		->from('Percepcion p')
		->andWhere('p.FacturaCompraNumero = ?', $this->Numero)
		->andWhere('p.ProveedorId = ?', $this->ProveedorId)
		->andWhere('p.TipoIvaId = ?', $this->TipoIvaId);
	
		//echo $q->getsqlquery();
	
		return $q->execute();
	
	}
	
	public function GetTipo()
	{
		return $this->TipoIva->GetLetraFactura();
	}
}